import*as produkModel from"../models/produkModel.js";import*as kategoriModel from"../models/kategoriModel.js";import{getJumlahProdukFromDB}from"../models/produkModel.js";import path from"path";import fs from"fs";import{fileURLToPath}from"url";const __filename=fileURLToPath(import.meta.url),__dirname=path.dirname(__filename);export const addProduk=async(req,res)=>{try{const penggunaId=req.user.id,{nama:nama,deskripsi:deskripsi,kategori_id:kategori_id,harga:harga,lokasi:lokasi,stok:stok}=req.body;let gambarPath=null;if(req.file&&(gambarPath=`/uploads/${req.file.filename}`),!(nama&&kategori_id&&harga&&lokasi&&null!=stok))return res.status(400).json({success:!1,message:"Field yang wajib diisi tidak boleh kosong"});await produkModel.addProduk(penggunaId,nama,deskripsi,kategori_id,harga,lokasi,stok,gambarPath),res.status(201).json({success:!0,message:"Produk berhasil ditambahkan"})}catch(error){console.error("Error adding produk:",error),res.status(500).json({success:!1,message:"Gagal menambahkan produk"})}};export const getAllProduk=async(req,res)=>{try{const produk=await produkModel.getAllProduk({include:[{model:kategoriModel,as:"kategori",attributes:["id","nama"]}]});res.status(200).json(produk)}catch(error){console.error("Error fetching all products: ",error),res.status(500).json({success:!1,message:"Gagal mendapatkan semua produk",error:error.message})}};export const updateProduk=async(req,res)=>{try{const{produk_id:produk_id}=req.params,{nama:nama,deskripsi:deskripsi,kategori_id:kategori_id,harga:harga,lokasi:lokasi,stok:stok}=req.body,produkLama=await produkModel.getProdukById(produk_id);if(!produkLama)return res.status(404).json({success:!1,message:"Produk tidak ditemukan"});let gambarPath=produkLama.gambar;if(req.file){if(gambarPath){const oldImagePath=path.join(__dirname,"..",gambarPath);fs.existsSync(oldImagePath)&&fs.unlinkSync(oldImagePath)}gambarPath=`/uploads/${req.file.filename}`}await produkModel.updateProduk(produk_id,nama,deskripsi,kategori_id,harga,lokasi,stok,gambarPath),res.status(200).json({success:!0,message:"Produk berhasil diperbarui"})}catch(error){console.error("Error updating produk:",error),res.status(500).json({success:!1,message:"Gagal memperbarui produk"})}};export const deleteProduk=async(req,res)=>{try{const{produk_id:produk_id}=req.params,produk=await produkModel.getProdukById(produk_id);if(!produk)return res.status(404).json({success:!1,message:"Produk tidak ditemukan"});if(produk.gambar){const gambarPath=path.join(__dirname,"..",produk.gambar);fs.existsSync(gambarPath)&&fs.unlinkSync(gambarPath)}await produkModel.deleteProduk(produk_id),res.status(200).json({success:!0,message:"Produk berhasil dihapus beserta gambar"})}catch(error){console.error("Error deleting produk:",error),res.status(500).json({success:!1,message:"Gagal menghapus produk"})}};export const getJumlahProduk=async(req,res)=>{try{const jumlahProduk=await getJumlahProdukFromDB();res.json({count:jumlahProduk})}catch(error){console.error("Error fetching product count:",error),res.status(500).send("Server Error")}};export const getProdukByUserId=async(req,res)=>{try{const userId=req.user?.id;if(!userId)return res.status(400).json({message:"User ID tidak ditemukan"});const products=await produkModel.getProdukByUserId(userId);res.status(200).json(products)}catch(err){console.error("Error fetching products: ",err),res.status(500).json({message:"Terjadi kesalahan saat mengambil produk"})}};export const getProdukById=async(req,res)=>{const{id:id}=req.params;try{const produk=await produkModel.getProdukById(id,{include:[{model:kategoriModel,as:"kategori",attributes:["id","nama"]}]});if(!produk)return res.status(404).json({message:"Produk tidak ditemukan"});produk.kategori&&(produk.kategori_id=produk.kategori.nama),res.status(200).json(produk)}catch(error){res.status(500).json({message:"Gagal mendapatkan produk",error:error.message})}};export const getAllProdukById=async(req,res)=>{const{id:id}=req.params;try{const produk=await produkModel.getAllProdukByUserId(id);if(!produk||0===produk.length)return res.status(404).json({message:"Produk tidak ditemukan"});const result=produk.map((item=>({id:item.id,nama:item.nama,deskripsi:item.deskripsi,kategori:item.kategori_nama||"Kategori tidak tersedia",harga:item.harga,lokasi:item.lokasi,stok:item.stok,gambar:item.gambar})));res.status(200).json(result)}catch(error){console.error("Error fetching products: ",error.message),res.status(500).json({message:"Gagal mendapatkan produk",error:error.message})}};